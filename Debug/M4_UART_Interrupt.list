
M4_UART_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001310  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080014f0  080014f0  000114f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001548  08001548  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08001548  08001548  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001548  08001548  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001548  08001548  00011548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800154c  0800154c  0001154c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08001550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          000002d8  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000328  20000328  00020050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 14 .debug_info   00002850  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000a1c  00000000  00000000  00022913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000268  00000000  00000000  00023330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001a0  00000000  00000000  00023598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c42b  00000000  00000000  00023738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003776  00000000  00000000  0003fb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a2ad0  00000000  00000000  000432d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000be8  00000000  00000000  000e5dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000e6994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000050 	.word	0x20000050
 80001fc:	00000000 	.word	0x00000000
 8000200:	080014d8 	.word	0x080014d8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000054 	.word	0x20000054
 800021c:	080014d8 	.word	0x080014d8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <LPUART_IRQHandler>:
#include "main.h"
#include "lpuart.h"
#include "tester.h"

void LPUART_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	LPUART1_RxInterrupt();
 80002c4:	f000 f99c 	bl	8000600 <LPUART1_RxInterrupt>

	TEST1_On();
 80002c8:	f000 fc24 	bl	8000b14 <TEST1_On>
	LPUART1_TxInterrupt();
 80002cc:	f000 f98a 	bl	80005e4 <LPUART1_TxInterrupt>
	TEST1_Off();
 80002d0:	f000 fc2e 	bl	8000b30 <TEST1_Off>
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <LED_LD2_Init>:

// 1 - On
// 0 - Off

void LED_LD2_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	// LD2 on PA5
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80002dc:	4b09      	ldr	r3, [pc, #36]	; (8000304 <LED_LD2_Init+0x2c>)
 80002de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e0:	4a08      	ldr	r2, [pc, #32]	; (8000304 <LED_LD2_Init+0x2c>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->MODER &= ~(GPIO_MODER_MODE5_1);
 80002e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002f6:	6013      	str	r3, [r2, #0]
//	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT5); // After reset is ok

//	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5);

//	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5);
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <LED_LD2_Toggle>:
//	GPIOA->ODR &= ~(GPIO_ODR_OD5);
	GPIOA->BSRR = GPIO_BSRR_BR5;
}

__attribute__((always_inline)) inline void LED_LD2_Toggle(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= GPIO_ODR_OD5;
 800030c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000316:	f083 0320 	eor.w	r3, r3, #32
 800031a:	6153      	str	r3, [r2, #20]
}
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
	...

08000328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000336:	2b00      	cmp	r3, #0
 8000338:	db0b      	blt.n	8000352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	f003 021f 	and.w	r2, r3, #31
 8000340:	4907      	ldr	r1, [pc, #28]	; (8000360 <__NVIC_EnableIRQ+0x38>)
 8000342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000346:	095b      	lsrs	r3, r3, #5
 8000348:	2001      	movs	r0, #1
 800034a:	fa00 f202 	lsl.w	r2, r0, r2
 800034e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000e100 	.word	0xe000e100

08000364 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	2b00      	cmp	r3, #0
 8000374:	db0c      	blt.n	8000390 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	f003 021f 	and.w	r2, r3, #31
 800037c:	4907      	ldr	r1, [pc, #28]	; (800039c <__NVIC_ClearPendingIRQ+0x38>)
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	095b      	lsrs	r3, r3, #5
 8000384:	2001      	movs	r0, #1
 8000386:	fa00 f202 	lsl.w	r2, r0, r2
 800038a:	3360      	adds	r3, #96	; 0x60
 800038c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000e100 	.word	0xe000e100

080003a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	6039      	str	r1, [r7, #0]
 80003aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	db0a      	blt.n	80003ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	490c      	ldr	r1, [pc, #48]	; (80003ec <__NVIC_SetPriority+0x4c>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	0112      	lsls	r2, r2, #4
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	440b      	add	r3, r1
 80003c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c8:	e00a      	b.n	80003e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4908      	ldr	r1, [pc, #32]	; (80003f0 <__NVIC_SetPriority+0x50>)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	f003 030f 	and.w	r3, r3, #15
 80003d6:	3b04      	subs	r3, #4
 80003d8:	0112      	lsls	r2, r2, #4
 80003da:	b2d2      	uxtb	r2, r2
 80003dc:	440b      	add	r3, r1
 80003de:	761a      	strb	r2, [r3, #24]
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	e000e100 	.word	0xe000e100
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f003 0307 	and.w	r3, r3, #7
 8000406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000408:	69fb      	ldr	r3, [r7, #28]
 800040a:	f1c3 0307 	rsb	r3, r3, #7
 800040e:	2b04      	cmp	r3, #4
 8000410:	bf28      	it	cs
 8000412:	2304      	movcs	r3, #4
 8000414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	3304      	adds	r3, #4
 800041a:	2b06      	cmp	r3, #6
 800041c:	d902      	bls.n	8000424 <NVIC_EncodePriority+0x30>
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	3b03      	subs	r3, #3
 8000422:	e000      	b.n	8000426 <NVIC_EncodePriority+0x32>
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000428:	f04f 32ff 	mov.w	r2, #4294967295
 800042c:	69bb      	ldr	r3, [r7, #24]
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	43da      	mvns	r2, r3
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	401a      	ands	r2, r3
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800043c:	f04f 31ff 	mov.w	r1, #4294967295
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	fa01 f303 	lsl.w	r3, r1, r3
 8000446:	43d9      	mvns	r1, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800044c:	4313      	orrs	r3, r2
         );
}
 800044e:	4618      	mov	r0, r3
 8000450:	3724      	adds	r7, #36	; 0x24
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
	...

0800045c <LPUART1_GPIO_Init>:
static RingBuffer RxBuffer;
static RingBuffer TxBuffer;
volatile uint8_t LineReadyFlag;

void LPUART1_GPIO_Init(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	// TX - PA2
	// RX - PA3

	// Enable clock for GPIO pins
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <LPUART1_GPIO_Init+0x4c>)
 8000462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000464:	4a10      	ldr	r2, [pc, #64]	; (80004a8 <LPUART1_GPIO_Init+0x4c>)
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER &= ~(GPIO_MODER_MODE3_0);
	GPIOA->AFR[0] |= (12 << GPIO_AFRL_AFSEL3_Pos);
	GPIOA->OTYPER |= GPIO_OTYPER_OT3;
*/
	// TX and RX once
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0); // AF Mode
 800046c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000476:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800047a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= ((12 << GPIO_AFRL_AFSEL2_Pos) | (12 << GPIO_AFRL_AFSEL3_Pos)); // Select AF number
 800047c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000480:	6a1b      	ldr	r3, [r3, #32]
 8000482:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000486:	f443 434c 	orr.w	r3, r3, #52224	; 0xcc00
 800048a:	6213      	str	r3, [r2, #32]
	GPIOA->OTYPER |= GPIO_OTYPER_OT3; // Set push-pull output type for TX pin
 800048c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000496:	f043 0308 	orr.w	r3, r3, #8
 800049a:	6053      	str	r3, [r2, #4]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40021000 	.word	0x40021000

080004ac <LPUART1_InterruptsConfig>:

void LPUART1_InterruptsConfig(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	LPUART1->CR1 |= USART_CR1_RXNEIE_RXFNEIE; // Enable Receive interrupt
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <LPUART1_InterruptsConfig+0x34>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <LPUART1_InterruptsConfig+0x34>)
 80004b6:	f043 0320 	orr.w	r3, r3, #32
 80004ba:	6013      	str	r3, [r2, #0]

	// Set NVIC for UART Interrupt
	NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_PRIORITYGROUP_SELECTED, 0, 0)); // Highest priority - 0,0
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2003      	movs	r0, #3
 80004c2:	f7ff ff97 	bl	80003f4 <NVIC_EncodePriority>
 80004c6:	4603      	mov	r3, r0
 80004c8:	4619      	mov	r1, r3
 80004ca:	205b      	movs	r0, #91	; 0x5b
 80004cc:	f7ff ff68 	bl	80003a0 <__NVIC_SetPriority>
	NVIC_ClearPendingIRQ(LPUART1_IRQn); // Clear pending to avoid misshandling
 80004d0:	205b      	movs	r0, #91	; 0x5b
 80004d2:	f7ff ff47 	bl	8000364 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(LPUART1_IRQn);
 80004d6:	205b      	movs	r0, #91	; 0x5b
 80004d8:	f7ff ff26 	bl	8000328 <__NVIC_EnableIRQ>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40008000 	.word	0x40008000

080004e4 <LPUART1_Config>:

void LPUART1_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	// Enable UART Clock
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN;
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <LPUART1_Config+0x4c>)
 80004ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80004ee:	4a10      	ldr	r2, [pc, #64]	; (8000530 <LPUART1_Config+0x4c>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	65d3      	str	r3, [r2, #92]	; 0x5c
	// ROUND UP
	// LPUARTDIV = 256 * (48000000 / 115200) = 106667
	// Calculated baudrate: (256*48M)/106666 = 115199,640001125
	// Error = 100 - ((115199,640001125 / 115200)*100) = 0,0003124990234375 %

	uint32_t BRR_Value = 106666; // 256 * (48000000 / 115200);
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <LPUART1_Config+0x50>)
 80004f8:	607b      	str	r3, [r7, #4]
	if(BRR_Value < 0x300 || BRR_Value > 0xFFFFF) while(1);  // Check constraints
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000500:	d303      	bcc.n	800050a <LPUART1_Config+0x26>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000508:	d300      	bcc.n	800050c <LPUART1_Config+0x28>
 800050a:	e7fe      	b.n	800050a <LPUART1_Config+0x26>

	LPUART1->BRR = BRR_Value & USART_BRR_LPUART; // Set calculated baudrate
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <LPUART1_Config+0x54>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000514:	60d3      	str	r3, [r2, #12]

	//	LPUART1->CR1 |= USART_CR1_UE; // Enable UART
	//	LPUART1->CR1 |= USART_CR1_TE; // Enable UART Transmitter
	//	LPUART1->CR1 |= USART_CR1_RE; // Enable UART Receiver

	LPUART1_InterruptsConfig(); // Config interrupts
 8000516:	f7ff ffc9 	bl	80004ac <LPUART1_InterruptsConfig>

	LPUART1->CR1 |= (USART_CR1_UE | USART_CR1_TE | USART_CR1_RE); // Enable all in one time
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <LPUART1_Config+0x54>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a06      	ldr	r2, [pc, #24]	; (8000538 <LPUART1_Config+0x54>)
 8000520:	f043 030d 	orr.w	r3, r3, #13
 8000524:	6013      	str	r3, [r2, #0]
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	0001a0aa 	.word	0x0001a0aa
 8000538:	40008000 	.word	0x40008000

0800053c <LPUART1_Init>:

void LPUART1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	LPUART1_GPIO_Init();
 8000540:	f7ff ff8c 	bl	800045c <LPUART1_GPIO_Init>
	LPUART1_Config();
 8000544:	f7ff ffce 	bl	80004e4 <LPUART1_Config>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}

0800054c <LPUART1_SendChar>:

void LPUART1_SendChar(char ch)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
	RB_Write(&TxBuffer, ch); // Put char to round-buffer
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4619      	mov	r1, r3
 800055a:	4803      	ldr	r0, [pc, #12]	; (8000568 <LPUART1_SendChar+0x1c>)
 800055c:	f000 f953 	bl	8000806 <RB_Write>
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200000b0 	.word	0x200000b0

0800056c <LPUART1_SendString>:

void LPUART1_SendString(char *str)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	while(*str != '\0') // If there is something to send
 8000574:	e007      	b.n	8000586 <LPUART1_SendString+0x1a>
	{
		LPUART1_SendChar(*str); // Send char
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffe6 	bl	800054c <LPUART1_SendChar>
		str++; // Next char
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3301      	adds	r3, #1
 8000584:	607b      	str	r3, [r7, #4]
	while(*str != '\0') // If there is something to send
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1f3      	bne.n	8000576 <LPUART1_SendString+0xa>
	}

	// Enable TXE interrupt - transmit will start immediately
	LPUART1->CR1 |=	USART_CR1_TXEIE_TXFNFIE;
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <LPUART1_SendString+0x38>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <LPUART1_SendString+0x38>)
 8000594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000598:	6013      	str	r3, [r2, #0]
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40008000 	.word	0x40008000

080005a8 <LPUART1_GetNextCharToSend>:

void LPUART1_GetNextCharToSend(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	uint8_t ToTransmit;

	// Try to read from TX Buffer
	if(RB_OK == RB_Read(&TxBuffer, &ToTransmit))
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	4619      	mov	r1, r3
 80005b2:	480a      	ldr	r0, [pc, #40]	; (80005dc <LPUART1_GetNextCharToSend+0x34>)
 80005b4:	f000 f8fe 	bl	80007b4 <RB_Read>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d103      	bne.n	80005c6 <LPUART1_GetNextCharToSend+0x1e>
	{
		// If there is something to send - put into UART TX buffer
		LPUART1->TDR = ToTransmit;
 80005be:	79fa      	ldrb	r2, [r7, #7]
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <LPUART1_GetNextCharToSend+0x38>)
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
	else
	{
		// If nothing to send - disable TX interrupt
		LPUART1->CR1 &= ~(USART_CR1_TXEIE_TXFNFIE);
	}
}
 80005c4:	e005      	b.n	80005d2 <LPUART1_GetNextCharToSend+0x2a>
		LPUART1->CR1 &= ~(USART_CR1_TXEIE_TXFNFIE);
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <LPUART1_GetNextCharToSend+0x38>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <LPUART1_GetNextCharToSend+0x38>)
 80005cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005d0:	6013      	str	r3, [r2, #0]
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000b0 	.word	0x200000b0
 80005e0:	40008000 	.word	0x40008000

080005e4 <LPUART1_TxInterrupt>:

void LPUART1_TxInterrupt(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	// Check if TX Interrupt occured
	if(LPUART1->ISR & USART_ISR_TXE_TXFNF)
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <LPUART1_TxInterrupt+0x18>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <LPUART1_TxInterrupt+0x14>
	{
		// Take next char to send from round-buffer
		LPUART1_GetNextCharToSend();
 80005f4:	f7ff ffd8 	bl	80005a8 <LPUART1_GetNextCharToSend>
	}
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40008000 	.word	0x40008000

08000600 <LPUART1_RxInterrupt>:

void LPUART1_RxInterrupt(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	// Check if RX Interrupt occured
	if(LPUART1->ISR & USART_ISR_RXNE_RXFNE)
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <LPUART1_RxInterrupt+0x40>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0320 	and.w	r3, r3, #32
 800060e:	2b00      	cmp	r3, #0
 8000610:	d011      	beq.n	8000636 <LPUART1_RxInterrupt+0x36>
	{
		uint8_t Recevied = LPUART1->RDR; // Receive char from UART RX buffer
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <LPUART1_RxInterrupt+0x40>)
 8000614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000616:	71fb      	strb	r3, [r7, #7]
		RB_Write(&RxBuffer, Recevied); // Store into RX round-buffer
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4619      	mov	r1, r3
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <LPUART1_RxInterrupt+0x44>)
 800061e:	f000 f8f2 	bl	8000806 <RB_Write>

		// Check if we got end of frame sign
		if(Recevied == EOF_CHAR)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b0a      	cmp	r3, #10
 8000626:	d106      	bne.n	8000636 <LPUART1_RxInterrupt+0x36>
		{
			LineReadyFlag++; // Increase ready to parse line counter
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <LPUART1_RxInterrupt+0x48>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	3301      	adds	r3, #1
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <LPUART1_RxInterrupt+0x48>)
 8000634:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40008000 	.word	0x40008000
 8000644:	2000006c 	.word	0x2000006c
 8000648:	200000f2 	.word	0x200000f2

0800064c <LPUART1_IsLineReady>:

uint8_t LPUART1_IsLineReady(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
	return LineReadyFlag; // Return line counter
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <LPUART1_IsLineReady+0x14>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	200000f2 	.word	0x200000f2

08000664 <LPUART1_GetLine>:

uint8_t LPUART1_GetLine(char *Line)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	Line[0] = '\0'; // For safety
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]

	// For whole RX round-buffer
	for(i = 0; i < RING_BUFFER_SIZE; i++)
 8000672:	2300      	movs	r3, #0
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	e022      	b.n	80006be <LPUART1_GetLine+0x5a>
	{
		// Try to read from RX round-buffer to line pointer
		if(RB_OK != RB_Read(&RxBuffer, (uint8_t*)&(Line[i])))
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	4619      	mov	r1, r3
 8000680:	4813      	ldr	r0, [pc, #76]	; (80006d0 <LPUART1_GetLine+0x6c>)
 8000682:	f000 f897 	bl	80007b4 <RB_Read>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <LPUART1_GetLine+0x2c>
		{
			// return error if nothing more to read
			return 1;
 800068c:	2301      	movs	r3, #1
 800068e:	e01a      	b.n	80006c6 <LPUART1_GetLine+0x62>
		}

		// Check if end of frame sign is met
		if(Line[i] == EOF_CHAR)
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b0a      	cmp	r3, #10
 800069a:	d10d      	bne.n	80006b8 <LPUART1_GetLine+0x54>
		{
			Line[i] = '\0'; // change EOF to end of c-string sign
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
			LineReadyFlag--; // Decrease line counter
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <LPUART1_GetLine+0x70>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	3b01      	subs	r3, #1
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <LPUART1_GetLine+0x70>)
 80006b2:	701a      	strb	r2, [r3, #0]
			return 0; // no error
 80006b4:	2300      	movs	r3, #0
 80006b6:	e006      	b.n	80006c6 <LPUART1_GetLine+0x62>
	for(i = 0; i < RING_BUFFER_SIZE; i++)
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	3301      	adds	r3, #1
 80006bc:	73fb      	strb	r3, [r7, #15]
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2b3f      	cmp	r3, #63	; 0x3f
 80006c2:	d9d9      	bls.n	8000678 <LPUART1_GetLine+0x14>
		}
	}
	return 1; // unspecified error - should never get there.
 80006c4:	2301      	movs	r3, #1
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	2000006c 	.word	0x2000006c
 80006d4:	200000f2 	.word	0x200000f2

080006d8 <main>:
void TaskLD2(void);
void TaskLPUART1(void);
void TaskLPUART1Fast(void);

int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	SystemClockSetup();
 80006dc:	f000 f9a8 	bl	8000a30 <SystemClockSetup>
	TEST1_Init();
 80006e0:	f000 fa00 	bl	8000ae4 <TEST1_Init>
	TEST1_Off();
 80006e4:	f000 fa24 	bl	8000b30 <TEST1_Off>

	LED_LD2_Init();
 80006e8:	f7ff fdf6 	bl	80002d8 <LED_LD2_Init>

	LPUART1_Init();
 80006ec:	f7ff ff26 	bl	800053c <LPUART1_Init>

	SoftTimerAction(&TimerLD2, TaskLD2);
 80006f0:	491a      	ldr	r1, [pc, #104]	; (800075c <main+0x84>)
 80006f2:	481b      	ldr	r0, [pc, #108]	; (8000760 <main+0x88>)
 80006f4:	f000 f8d2 	bl	800089c <SoftTimerAction>
	SoftTimerStart(&TimerLD2, 500);
 80006f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006fc:	4818      	ldr	r0, [pc, #96]	; (8000760 <main+0x88>)
 80006fe:	f000 f8db 	bl	80008b8 <SoftTimerStart>

	SoftTimerAction(&TimerLPUART1, TaskLPUART1);
 8000702:	4918      	ldr	r1, [pc, #96]	; (8000764 <main+0x8c>)
 8000704:	4818      	ldr	r0, [pc, #96]	; (8000768 <main+0x90>)
 8000706:	f000 f8c9 	bl	800089c <SoftTimerAction>
	SoftTimerStart(&TimerLPUART1, 2000);
 800070a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800070e:	4816      	ldr	r0, [pc, #88]	; (8000768 <main+0x90>)
 8000710:	f000 f8d2 	bl	80008b8 <SoftTimerStart>

	SoftTimerAction(&TimerLPUART1Fast, TaskLPUART1Fast);
 8000714:	4915      	ldr	r1, [pc, #84]	; (800076c <main+0x94>)
 8000716:	4816      	ldr	r0, [pc, #88]	; (8000770 <main+0x98>)
 8000718:	f000 f8c0 	bl	800089c <SoftTimerAction>
	SoftTimerStart(&TimerLPUART1Fast, 500);
 800071c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000720:	4813      	ldr	r0, [pc, #76]	; (8000770 <main+0x98>)
 8000722:	f000 f8c9 	bl	80008b8 <SoftTimerStart>


    /* Loop forever */
	while(1)
	{
		SoftTimerEvent(&TimerLD2);
 8000726:	480e      	ldr	r0, [pc, #56]	; (8000760 <main+0x88>)
 8000728:	f000 f896 	bl	8000858 <SoftTimerEvent>
		SoftTimerEvent(&TimerLPUART1);
 800072c:	480e      	ldr	r0, [pc, #56]	; (8000768 <main+0x90>)
 800072e:	f000 f893 	bl	8000858 <SoftTimerEvent>
		SoftTimerEvent(&TimerLPUART1Fast);
 8000732:	480f      	ldr	r0, [pc, #60]	; (8000770 <main+0x98>)
 8000734:	f000 f890 	bl	8000858 <SoftTimerEvent>

		if(LPUART1_IsLineReady())
 8000738:	f7ff ff88 	bl	800064c <LPUART1_IsLineReady>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f1      	beq.n	8000726 <main+0x4e>
		{
			LPUART1_GetLine(ReceivedString);
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <main+0x9c>)
 8000744:	f7ff ff8e 	bl	8000664 <LPUART1_GetLine>

			sprintf(ToSend, "Char Received: %s\r\n", ReceivedString);
 8000748:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <main+0x9c>)
 800074a:	490b      	ldr	r1, [pc, #44]	; (8000778 <main+0xa0>)
 800074c:	480b      	ldr	r0, [pc, #44]	; (800077c <main+0xa4>)
 800074e:	f000 fa27 	bl	8000ba0 <siprintf>
			LPUART1_SendString(ToSend);
 8000752:	480a      	ldr	r0, [pc, #40]	; (800077c <main+0xa4>)
 8000754:	f7ff ff0a 	bl	800056c <LPUART1_SendString>
		SoftTimerEvent(&TimerLD2);
 8000758:	e7e5      	b.n	8000726 <main+0x4e>
 800075a:	bf00      	nop
 800075c:	08000781 	.word	0x08000781
 8000760:	200000f4 	.word	0x200000f4
 8000764:	0800078d 	.word	0x0800078d
 8000768:	20000100 	.word	0x20000100
 800076c:	080007a1 	.word	0x080007a1
 8000770:	2000010c 	.word	0x2000010c
 8000774:	20000118 	.word	0x20000118
 8000778:	080014f0 	.word	0x080014f0
 800077c:	20000158 	.word	0x20000158

08000780 <TaskLD2>:

	}
}

void TaskLD2(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	LED_LD2_Toggle();
 8000784:	f7ff fdc0 	bl	8000308 <LED_LD2_Toggle>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <TaskLPUART1>:

void TaskLPUART1(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	LPUART1_SendString("Test\r\n");
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <TaskLPUART1+0x10>)
 8000792:	f7ff feeb 	bl	800056c <LPUART1_SendString>
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08001504 	.word	0x08001504

080007a0 <TaskLPUART1Fast>:

void TaskLPUART1Fast(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	LPUART1_SendString("Fast!\r\n");
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <TaskLPUART1Fast+0x10>)
 80007a6:	f7ff fee1 	bl	800056c <LPUART1_SendString>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	0800150c 	.word	0x0800150c

080007b4 <RB_Read>:
 */
#include "main.h"
#include "ring_buffer.h"

RB_Status RB_Read(RingBuffer *rb, uint8_t *Value)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail) // Check if there is something to read (Tail hits Head pointer)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	781a      	ldrb	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d101      	bne.n	80007ce <RB_Read+0x1a>
	{
		return RB_ERROR; // Nothing to read
 80007ca:	2301      	movs	r3, #1
 80007cc:	e015      	b.n	80007fa <RB_Read+0x46>
	}

	*Value = rb->Buffer[rb->Tail];  // Write byte to variable from Value pointer
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	785b      	ldrb	r3, [r3, #1]
 80007d2:	461a      	mov	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	789a      	ldrb	r2, [r3, #2]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	701a      	strb	r2, [r3, #0]

	rb->Tail = (rb->Tail + 1) % RING_BUFFER_SIZE; // New Tail pointer value
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	785b      	ldrb	r3, [r3, #1]
 80007e2:	3301      	adds	r3, #1
 80007e4:	425a      	negs	r2, r3
 80007e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007ee:	bf58      	it	pl
 80007f0:	4253      	negpl	r3, r2
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	705a      	strb	r2, [r3, #1]

	return RB_OK;	// Return Success
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <RB_Write>:


RB_Status RB_Write(RingBuffer *rb, uint8_t Value)
{
 8000806:	b480      	push	{r7}
 8000808:	b085      	sub	sp, #20
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
 800080e:	460b      	mov	r3, r1
 8000810:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1) % RING_BUFFER_SIZE; // Temp Head pointer for free space check
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	425a      	negs	r2, r3
 800081a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800081e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000822:	bf58      	it	pl
 8000824:	4253      	negpl	r3, r2
 8000826:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail) // Check if there is one free space in front of Had pointer
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	785b      	ldrb	r3, [r3, #1]
 800082c:	7bfa      	ldrb	r2, [r7, #15]
 800082e:	429a      	cmp	r2, r3
 8000830:	d101      	bne.n	8000836 <RB_Write+0x30>
	{
		return RB_ERROR; // No free space error
 8000832:	2301      	movs	r3, #1
 8000834:	e00a      	b.n	800084c <RB_Write+0x46>
	}

	rb->Buffer[rb->Head] = Value; // Write new byte in Head position
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4413      	add	r3, r2
 8000840:	78fa      	ldrb	r2, [r7, #3]
 8000842:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead; 	// New Head pointer value
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7bfa      	ldrb	r2, [r7, #15]
 8000848:	701a      	strb	r2, [r3, #0]

	return RB_OK;	// Return Success
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <SoftTimerEvent>:
 */
#include "main.h"
#include "software_timers.h"

void SoftTimerEvent(SoftTimer_t *Timer)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if(Timer->TimeToDelay) // If no time to wait - Timer disabled
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d015      	beq.n	8000894 <SoftTimerEvent+0x3c>
	{
		if((GetSystemTick() - Timer->LastTick) > Timer->TimeToDelay) // Check if is time to make  action
 8000868:	f000 f8fa 	bl	8000a60 <GetSystemTick>
 800086c:	4602      	mov	r2, r0
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	1ad2      	subs	r2, r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d90b      	bls.n	8000894 <SoftTimerEvent+0x3c>
		{
			Timer->LastTick = GetSystemTick(); // Refill action's timer
 800087c:	f000 f8f0 	bl	8000a60 <GetSystemTick>
 8000880:	4602      	mov	r2, r0
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	605a      	str	r2, [r3, #4]
			if(Timer->Action)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <SoftTimerEvent+0x3c>
			{
				Timer->Action(); // Make Action!
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	4798      	blx	r3
			}
		}
	}
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <SoftTimerAction>:

void SoftTimerAction(SoftTimer_t *Timer, void (*_Action)(void))
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	Timer->Action = _Action; // Set a new Action
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	609a      	str	r2, [r3, #8]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SoftTimerStart>:

void SoftTimerStart(SoftTimer_t *Timer, uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
	if(Delay != 0)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d007      	beq.n	80008d8 <SoftTimerStart+0x20>
	{
		Timer->TimeToDelay = Delay; // Set Delay
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	601a      	str	r2, [r3, #0]
		Timer->LastTick = GetSystemTick(); // Get start Tick
 80008ce:	f000 f8c7 	bl	8000a60 <GetSystemTick>
 80008d2:	4602      	mov	r2, r0
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	605a      	str	r2, [r3, #4]
//		if(Timer->Action)
//		{
//			Timer->Action();
//		}
	}
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <__NVIC_SetPriority>:
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000944:	d301      	bcc.n	800094a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000946:	2301      	movs	r3, #1
 8000948:	e00f      	b.n	800096a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <SysTick_Config+0x40>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000952:	210f      	movs	r1, #15
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f7ff ffc2 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <SysTick_Config+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <SysTick_Config+0x40>)
 8000964:	2207      	movs	r2, #7
 8000966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	e000e010 	.word	0xe000e010

08000978 <SystemClockPLL48>:
	// Wait for switch
	while(!(RCC->CFGR & RCC_CFGR_SWS_1) && (RCC->CFGR & RCC_CFGR_SWS_0));
}

void SystemClockPLL48(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
// PLL Clock Mux
// PLL ON and set

// HSE 24 MHz select
	// HSE On
	RCC->CR |= RCC_CR_HSEON;
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <SystemClockPLL48+0xb4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a2a      	ldr	r2, [pc, #168]	; (8000a2c <SystemClockPLL48+0xb4>)
 8000982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000986:	6013      	str	r3, [r2, #0]

	// Wait for HSE
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000988:	bf00      	nop
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <SystemClockPLL48+0xb4>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f9      	beq.n	800098a <SystemClockPLL48+0x12>

// HSE as PLL Source
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLSRC);
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <SystemClockPLL48+0xb4>)
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <SystemClockPLL48+0xb4>)
 800099c:	f043 0303 	orr.w	r3, r3, #3
 80009a0:	60d3      	str	r3, [r2, #12]

// Dividers for 48M
	// PLLM Divider /2
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0;
 80009a2:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009a4:	68db      	ldr	r3, [r3, #12]
 80009a6:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	60d3      	str	r3, [r2, #12]
	// PLLN Multiplier *8 -  default is 0b0010000
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLN);
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80009b8:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (8 << RCC_PLLCFGR_PLLN_Pos);
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009c4:	60d3      	str	r3, [r2, #12]
	// PLLR Divider /2
	// It's default

// PLL Enable
	RCC->CR |= RCC_CR_PLLON;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009d0:	6013      	str	r3, [r2, #0]
	// Wait for PLL
	while(!(RCC->CR & RCC_CR_PLLRDY));
 80009d2:	bf00      	nop
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0f9      	beq.n	80009d4 <SystemClockPLL48+0x5c>

// PLL Output R Enable
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ea:	60d3      	str	r3, [r2, #12]

// Change switch to PLL
	RCC->CFGR |= RCC_CFGR_SW_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_0;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <SystemClockPLL48+0xb4>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6093      	str	r3, [r2, #8]

	// Wait for switch
	while(!((RCC->CFGR & RCC_CFGR_SWS_1) && (RCC->CFGR & RCC_CFGR_SWS_0)));
 8000a04:	bf00      	nop
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <SystemClockPLL48+0xb4>)
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d0f9      	beq.n	8000a06 <SystemClockPLL48+0x8e>
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <SystemClockPLL48+0xb4>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f3      	beq.n	8000a06 <SystemClockPLL48+0x8e>
}
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000

08000a30 <SystemClockSetup>:
	while(!((RCC->CFGR & RCC_CFGR_SWS_1) && (RCC->CFGR & RCC_CFGR_SWS_0)));

	RCC->CFGR &= ~(RCC_CFGR_HPRE);
}
void SystemClockSetup(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
//	SystemClockHSE24();
	SystemClockPLL48();
 8000a34:	f7ff ffa0 	bl	8000978 <SystemClockPLL48>
//	SystemClockPLL100();
//	SystemClockPLL170();

	SysTick_Config(48000000 / 1000);
 8000a38:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8000a3c:	f7ff ff7a 	bl	8000934 <SysTick_Config>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <SysTick_Handler>:

// SYSTICK TIMER
void SysTick_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	Tick++; // Increase system timer
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Handler+0x18>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	4a03      	ldr	r2, [pc, #12]	; (8000a5c <SysTick_Handler+0x18>)
 8000a50:	6013      	str	r3, [r2, #0]
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	200001d8 	.word	0x200001d8

08000a60 <GetSystemTick>:

uint32_t GetSystemTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
	return Tick;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <GetSystemTick+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200001d8 	.word	0x200001d8

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	; (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f000 f89a 	bl	8000be0 <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	; (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20020000 	.word	0x20020000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	200001dc 	.word	0x200001dc
 8000ae0:	20000328 	.word	0x20000328

08000ae4 <TEST1_Init>:
 */
#include "main.h"
#include "tester.h"

void TEST1_Init(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
	// Test Pin 1 on PC8
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <TEST1_Init+0x28>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <TEST1_Init+0x28>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE8_1);
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <TEST1_Init+0x2c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <TEST1_Init+0x2c>)
 8000afa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	48000800 	.word	0x48000800

08000b14 <TEST1_On>:

__attribute__((always_inline)) inline void TEST1_On(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	GPIOC->BSRR = GPIO_BSRR_BS8;
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <TEST1_On+0x18>)
 8000b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b1e:	619a      	str	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	48000800 	.word	0x48000800

08000b30 <TEST1_Off>:

__attribute__((always_inline)) inline void TEST1_Off(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
	GPIOC->BSRR = GPIO_BSRR_BR8;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <TEST1_Off+0x18>)
 8000b36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b3a:	619a      	str	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	48000800 	.word	0x48000800

08000b4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	; (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b7a:	f000 f837 	bl	8000bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7e:	f7ff fdab 	bl	80006d8 <main>

08000b82 <LoopForever>:

LoopForever:
  b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   r0, =_estack
 8000b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000b90:	08001550 	.word	0x08001550
  ldr r2, =_sbss
 8000b94:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000b98:	20000328 	.word	0x20000328

08000b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_2_IRQHandler>
	...

08000ba0 <siprintf>:
 8000ba0:	b40e      	push	{r1, r2, r3}
 8000ba2:	b500      	push	{lr}
 8000ba4:	b09c      	sub	sp, #112	; 0x70
 8000ba6:	ab1d      	add	r3, sp, #116	; 0x74
 8000ba8:	9002      	str	r0, [sp, #8]
 8000baa:	9006      	str	r0, [sp, #24]
 8000bac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <siprintf+0x38>)
 8000bb2:	9107      	str	r1, [sp, #28]
 8000bb4:	9104      	str	r1, [sp, #16]
 8000bb6:	4909      	ldr	r1, [pc, #36]	; (8000bdc <siprintf+0x3c>)
 8000bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bbc:	9105      	str	r1, [sp, #20]
 8000bbe:	6800      	ldr	r0, [r0, #0]
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	a902      	add	r1, sp, #8
 8000bc4:	f000 f98a 	bl	8000edc <_svfiprintf_r>
 8000bc8:	9b02      	ldr	r3, [sp, #8]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
 8000bce:	b01c      	add	sp, #112	; 0x70
 8000bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000bd4:	b003      	add	sp, #12
 8000bd6:	4770      	bx	lr
 8000bd8:	2000004c 	.word	0x2000004c
 8000bdc:	ffff0208 	.word	0xffff0208

08000be0 <__errno>:
 8000be0:	4b01      	ldr	r3, [pc, #4]	; (8000be8 <__errno+0x8>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000004c 	.word	0x2000004c

08000bec <__libc_init_array>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	4d0d      	ldr	r5, [pc, #52]	; (8000c24 <__libc_init_array+0x38>)
 8000bf0:	4c0d      	ldr	r4, [pc, #52]	; (8000c28 <__libc_init_array+0x3c>)
 8000bf2:	1b64      	subs	r4, r4, r5
 8000bf4:	10a4      	asrs	r4, r4, #2
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	42a6      	cmp	r6, r4
 8000bfa:	d109      	bne.n	8000c10 <__libc_init_array+0x24>
 8000bfc:	4d0b      	ldr	r5, [pc, #44]	; (8000c2c <__libc_init_array+0x40>)
 8000bfe:	4c0c      	ldr	r4, [pc, #48]	; (8000c30 <__libc_init_array+0x44>)
 8000c00:	f000 fc6a 	bl	80014d8 <_init>
 8000c04:	1b64      	subs	r4, r4, r5
 8000c06:	10a4      	asrs	r4, r4, #2
 8000c08:	2600      	movs	r6, #0
 8000c0a:	42a6      	cmp	r6, r4
 8000c0c:	d105      	bne.n	8000c1a <__libc_init_array+0x2e>
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
 8000c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c14:	4798      	blx	r3
 8000c16:	3601      	adds	r6, #1
 8000c18:	e7ee      	b.n	8000bf8 <__libc_init_array+0xc>
 8000c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c1e:	4798      	blx	r3
 8000c20:	3601      	adds	r6, #1
 8000c22:	e7f2      	b.n	8000c0a <__libc_init_array+0x1e>
 8000c24:	08001548 	.word	0x08001548
 8000c28:	08001548 	.word	0x08001548
 8000c2c:	08001548 	.word	0x08001548
 8000c30:	0800154c 	.word	0x0800154c

08000c34 <__retarget_lock_acquire_recursive>:
 8000c34:	4770      	bx	lr

08000c36 <__retarget_lock_release_recursive>:
 8000c36:	4770      	bx	lr

08000c38 <_free_r>:
 8000c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d044      	beq.n	8000cc8 <_free_r+0x90>
 8000c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c42:	9001      	str	r0, [sp, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f1a1 0404 	sub.w	r4, r1, #4
 8000c4a:	bfb8      	it	lt
 8000c4c:	18e4      	addlt	r4, r4, r3
 8000c4e:	f000 f8df 	bl	8000e10 <__malloc_lock>
 8000c52:	4a1e      	ldr	r2, [pc, #120]	; (8000ccc <_free_r+0x94>)
 8000c54:	9801      	ldr	r0, [sp, #4]
 8000c56:	6813      	ldr	r3, [r2, #0]
 8000c58:	b933      	cbnz	r3, 8000c68 <_free_r+0x30>
 8000c5a:	6063      	str	r3, [r4, #4]
 8000c5c:	6014      	str	r4, [r2, #0]
 8000c5e:	b003      	add	sp, #12
 8000c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c64:	f000 b8da 	b.w	8000e1c <__malloc_unlock>
 8000c68:	42a3      	cmp	r3, r4
 8000c6a:	d908      	bls.n	8000c7e <_free_r+0x46>
 8000c6c:	6825      	ldr	r5, [r4, #0]
 8000c6e:	1961      	adds	r1, r4, r5
 8000c70:	428b      	cmp	r3, r1
 8000c72:	bf01      	itttt	eq
 8000c74:	6819      	ldreq	r1, [r3, #0]
 8000c76:	685b      	ldreq	r3, [r3, #4]
 8000c78:	1949      	addeq	r1, r1, r5
 8000c7a:	6021      	streq	r1, [r4, #0]
 8000c7c:	e7ed      	b.n	8000c5a <_free_r+0x22>
 8000c7e:	461a      	mov	r2, r3
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	b10b      	cbz	r3, 8000c88 <_free_r+0x50>
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	d9fa      	bls.n	8000c7e <_free_r+0x46>
 8000c88:	6811      	ldr	r1, [r2, #0]
 8000c8a:	1855      	adds	r5, r2, r1
 8000c8c:	42a5      	cmp	r5, r4
 8000c8e:	d10b      	bne.n	8000ca8 <_free_r+0x70>
 8000c90:	6824      	ldr	r4, [r4, #0]
 8000c92:	4421      	add	r1, r4
 8000c94:	1854      	adds	r4, r2, r1
 8000c96:	42a3      	cmp	r3, r4
 8000c98:	6011      	str	r1, [r2, #0]
 8000c9a:	d1e0      	bne.n	8000c5e <_free_r+0x26>
 8000c9c:	681c      	ldr	r4, [r3, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	6053      	str	r3, [r2, #4]
 8000ca2:	440c      	add	r4, r1
 8000ca4:	6014      	str	r4, [r2, #0]
 8000ca6:	e7da      	b.n	8000c5e <_free_r+0x26>
 8000ca8:	d902      	bls.n	8000cb0 <_free_r+0x78>
 8000caa:	230c      	movs	r3, #12
 8000cac:	6003      	str	r3, [r0, #0]
 8000cae:	e7d6      	b.n	8000c5e <_free_r+0x26>
 8000cb0:	6825      	ldr	r5, [r4, #0]
 8000cb2:	1961      	adds	r1, r4, r5
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	bf04      	itt	eq
 8000cb8:	6819      	ldreq	r1, [r3, #0]
 8000cba:	685b      	ldreq	r3, [r3, #4]
 8000cbc:	6063      	str	r3, [r4, #4]
 8000cbe:	bf04      	itt	eq
 8000cc0:	1949      	addeq	r1, r1, r5
 8000cc2:	6021      	streq	r1, [r4, #0]
 8000cc4:	6054      	str	r4, [r2, #4]
 8000cc6:	e7ca      	b.n	8000c5e <_free_r+0x26>
 8000cc8:	b003      	add	sp, #12
 8000cca:	bd30      	pop	{r4, r5, pc}
 8000ccc:	20000320 	.word	0x20000320

08000cd0 <sbrk_aligned>:
 8000cd0:	b570      	push	{r4, r5, r6, lr}
 8000cd2:	4e0e      	ldr	r6, [pc, #56]	; (8000d0c <sbrk_aligned+0x3c>)
 8000cd4:	460c      	mov	r4, r1
 8000cd6:	6831      	ldr	r1, [r6, #0]
 8000cd8:	4605      	mov	r5, r0
 8000cda:	b911      	cbnz	r1, 8000ce2 <sbrk_aligned+0x12>
 8000cdc:	f000 fba6 	bl	800142c <_sbrk_r>
 8000ce0:	6030      	str	r0, [r6, #0]
 8000ce2:	4621      	mov	r1, r4
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	f000 fba1 	bl	800142c <_sbrk_r>
 8000cea:	1c43      	adds	r3, r0, #1
 8000cec:	d00a      	beq.n	8000d04 <sbrk_aligned+0x34>
 8000cee:	1cc4      	adds	r4, r0, #3
 8000cf0:	f024 0403 	bic.w	r4, r4, #3
 8000cf4:	42a0      	cmp	r0, r4
 8000cf6:	d007      	beq.n	8000d08 <sbrk_aligned+0x38>
 8000cf8:	1a21      	subs	r1, r4, r0
 8000cfa:	4628      	mov	r0, r5
 8000cfc:	f000 fb96 	bl	800142c <_sbrk_r>
 8000d00:	3001      	adds	r0, #1
 8000d02:	d101      	bne.n	8000d08 <sbrk_aligned+0x38>
 8000d04:	f04f 34ff 	mov.w	r4, #4294967295
 8000d08:	4620      	mov	r0, r4
 8000d0a:	bd70      	pop	{r4, r5, r6, pc}
 8000d0c:	20000324 	.word	0x20000324

08000d10 <_malloc_r>:
 8000d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d14:	1ccd      	adds	r5, r1, #3
 8000d16:	f025 0503 	bic.w	r5, r5, #3
 8000d1a:	3508      	adds	r5, #8
 8000d1c:	2d0c      	cmp	r5, #12
 8000d1e:	bf38      	it	cc
 8000d20:	250c      	movcc	r5, #12
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	4607      	mov	r7, r0
 8000d26:	db01      	blt.n	8000d2c <_malloc_r+0x1c>
 8000d28:	42a9      	cmp	r1, r5
 8000d2a:	d905      	bls.n	8000d38 <_malloc_r+0x28>
 8000d2c:	230c      	movs	r3, #12
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	2600      	movs	r6, #0
 8000d32:	4630      	mov	r0, r6
 8000d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000e0c <_malloc_r+0xfc>
 8000d3c:	f000 f868 	bl	8000e10 <__malloc_lock>
 8000d40:	f8d8 3000 	ldr.w	r3, [r8]
 8000d44:	461c      	mov	r4, r3
 8000d46:	bb5c      	cbnz	r4, 8000da0 <_malloc_r+0x90>
 8000d48:	4629      	mov	r1, r5
 8000d4a:	4638      	mov	r0, r7
 8000d4c:	f7ff ffc0 	bl	8000cd0 <sbrk_aligned>
 8000d50:	1c43      	adds	r3, r0, #1
 8000d52:	4604      	mov	r4, r0
 8000d54:	d155      	bne.n	8000e02 <_malloc_r+0xf2>
 8000d56:	f8d8 4000 	ldr.w	r4, [r8]
 8000d5a:	4626      	mov	r6, r4
 8000d5c:	2e00      	cmp	r6, #0
 8000d5e:	d145      	bne.n	8000dec <_malloc_r+0xdc>
 8000d60:	2c00      	cmp	r4, #0
 8000d62:	d048      	beq.n	8000df6 <_malloc_r+0xe6>
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	4631      	mov	r1, r6
 8000d68:	4638      	mov	r0, r7
 8000d6a:	eb04 0903 	add.w	r9, r4, r3
 8000d6e:	f000 fb5d 	bl	800142c <_sbrk_r>
 8000d72:	4581      	cmp	r9, r0
 8000d74:	d13f      	bne.n	8000df6 <_malloc_r+0xe6>
 8000d76:	6821      	ldr	r1, [r4, #0]
 8000d78:	1a6d      	subs	r5, r5, r1
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	4638      	mov	r0, r7
 8000d7e:	f7ff ffa7 	bl	8000cd0 <sbrk_aligned>
 8000d82:	3001      	adds	r0, #1
 8000d84:	d037      	beq.n	8000df6 <_malloc_r+0xe6>
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	442b      	add	r3, r5
 8000d8a:	6023      	str	r3, [r4, #0]
 8000d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d038      	beq.n	8000e06 <_malloc_r+0xf6>
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	42a2      	cmp	r2, r4
 8000d98:	d12b      	bne.n	8000df2 <_malloc_r+0xe2>
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	e00f      	b.n	8000dc0 <_malloc_r+0xb0>
 8000da0:	6822      	ldr	r2, [r4, #0]
 8000da2:	1b52      	subs	r2, r2, r5
 8000da4:	d41f      	bmi.n	8000de6 <_malloc_r+0xd6>
 8000da6:	2a0b      	cmp	r2, #11
 8000da8:	d917      	bls.n	8000dda <_malloc_r+0xca>
 8000daa:	1961      	adds	r1, r4, r5
 8000dac:	42a3      	cmp	r3, r4
 8000dae:	6025      	str	r5, [r4, #0]
 8000db0:	bf18      	it	ne
 8000db2:	6059      	strne	r1, [r3, #4]
 8000db4:	6863      	ldr	r3, [r4, #4]
 8000db6:	bf08      	it	eq
 8000db8:	f8c8 1000 	streq.w	r1, [r8]
 8000dbc:	5162      	str	r2, [r4, r5]
 8000dbe:	604b      	str	r3, [r1, #4]
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	f104 060b 	add.w	r6, r4, #11
 8000dc6:	f000 f829 	bl	8000e1c <__malloc_unlock>
 8000dca:	f026 0607 	bic.w	r6, r6, #7
 8000dce:	1d23      	adds	r3, r4, #4
 8000dd0:	1af2      	subs	r2, r6, r3
 8000dd2:	d0ae      	beq.n	8000d32 <_malloc_r+0x22>
 8000dd4:	1b9b      	subs	r3, r3, r6
 8000dd6:	50a3      	str	r3, [r4, r2]
 8000dd8:	e7ab      	b.n	8000d32 <_malloc_r+0x22>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	6862      	ldr	r2, [r4, #4]
 8000dde:	d1dd      	bne.n	8000d9c <_malloc_r+0x8c>
 8000de0:	f8c8 2000 	str.w	r2, [r8]
 8000de4:	e7ec      	b.n	8000dc0 <_malloc_r+0xb0>
 8000de6:	4623      	mov	r3, r4
 8000de8:	6864      	ldr	r4, [r4, #4]
 8000dea:	e7ac      	b.n	8000d46 <_malloc_r+0x36>
 8000dec:	4634      	mov	r4, r6
 8000dee:	6876      	ldr	r6, [r6, #4]
 8000df0:	e7b4      	b.n	8000d5c <_malloc_r+0x4c>
 8000df2:	4613      	mov	r3, r2
 8000df4:	e7cc      	b.n	8000d90 <_malloc_r+0x80>
 8000df6:	230c      	movs	r3, #12
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	4638      	mov	r0, r7
 8000dfc:	f000 f80e 	bl	8000e1c <__malloc_unlock>
 8000e00:	e797      	b.n	8000d32 <_malloc_r+0x22>
 8000e02:	6025      	str	r5, [r4, #0]
 8000e04:	e7dc      	b.n	8000dc0 <_malloc_r+0xb0>
 8000e06:	605b      	str	r3, [r3, #4]
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	bf00      	nop
 8000e0c:	20000320 	.word	0x20000320

08000e10 <__malloc_lock>:
 8000e10:	4801      	ldr	r0, [pc, #4]	; (8000e18 <__malloc_lock+0x8>)
 8000e12:	f7ff bf0f 	b.w	8000c34 <__retarget_lock_acquire_recursive>
 8000e16:	bf00      	nop
 8000e18:	2000031c 	.word	0x2000031c

08000e1c <__malloc_unlock>:
 8000e1c:	4801      	ldr	r0, [pc, #4]	; (8000e24 <__malloc_unlock+0x8>)
 8000e1e:	f7ff bf0a 	b.w	8000c36 <__retarget_lock_release_recursive>
 8000e22:	bf00      	nop
 8000e24:	2000031c 	.word	0x2000031c

08000e28 <__ssputs_r>:
 8000e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e2c:	688e      	ldr	r6, [r1, #8]
 8000e2e:	461f      	mov	r7, r3
 8000e30:	42be      	cmp	r6, r7
 8000e32:	680b      	ldr	r3, [r1, #0]
 8000e34:	4682      	mov	sl, r0
 8000e36:	460c      	mov	r4, r1
 8000e38:	4690      	mov	r8, r2
 8000e3a:	d82c      	bhi.n	8000e96 <__ssputs_r+0x6e>
 8000e3c:	898a      	ldrh	r2, [r1, #12]
 8000e3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000e42:	d026      	beq.n	8000e92 <__ssputs_r+0x6a>
 8000e44:	6965      	ldr	r5, [r4, #20]
 8000e46:	6909      	ldr	r1, [r1, #16]
 8000e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000e4c:	eba3 0901 	sub.w	r9, r3, r1
 8000e50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000e54:	1c7b      	adds	r3, r7, #1
 8000e56:	444b      	add	r3, r9
 8000e58:	106d      	asrs	r5, r5, #1
 8000e5a:	429d      	cmp	r5, r3
 8000e5c:	bf38      	it	cc
 8000e5e:	461d      	movcc	r5, r3
 8000e60:	0553      	lsls	r3, r2, #21
 8000e62:	d527      	bpl.n	8000eb4 <__ssputs_r+0x8c>
 8000e64:	4629      	mov	r1, r5
 8000e66:	f7ff ff53 	bl	8000d10 <_malloc_r>
 8000e6a:	4606      	mov	r6, r0
 8000e6c:	b360      	cbz	r0, 8000ec8 <__ssputs_r+0xa0>
 8000e6e:	6921      	ldr	r1, [r4, #16]
 8000e70:	464a      	mov	r2, r9
 8000e72:	f000 faeb 	bl	800144c <memcpy>
 8000e76:	89a3      	ldrh	r3, [r4, #12]
 8000e78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	81a3      	strh	r3, [r4, #12]
 8000e82:	6126      	str	r6, [r4, #16]
 8000e84:	6165      	str	r5, [r4, #20]
 8000e86:	444e      	add	r6, r9
 8000e88:	eba5 0509 	sub.w	r5, r5, r9
 8000e8c:	6026      	str	r6, [r4, #0]
 8000e8e:	60a5      	str	r5, [r4, #8]
 8000e90:	463e      	mov	r6, r7
 8000e92:	42be      	cmp	r6, r7
 8000e94:	d900      	bls.n	8000e98 <__ssputs_r+0x70>
 8000e96:	463e      	mov	r6, r7
 8000e98:	6820      	ldr	r0, [r4, #0]
 8000e9a:	4632      	mov	r2, r6
 8000e9c:	4641      	mov	r1, r8
 8000e9e:	f000 faab 	bl	80013f8 <memmove>
 8000ea2:	68a3      	ldr	r3, [r4, #8]
 8000ea4:	1b9b      	subs	r3, r3, r6
 8000ea6:	60a3      	str	r3, [r4, #8]
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	4433      	add	r3, r6
 8000eac:	6023      	str	r3, [r4, #0]
 8000eae:	2000      	movs	r0, #0
 8000eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb4:	462a      	mov	r2, r5
 8000eb6:	f000 fad7 	bl	8001468 <_realloc_r>
 8000eba:	4606      	mov	r6, r0
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	d1e0      	bne.n	8000e82 <__ssputs_r+0x5a>
 8000ec0:	6921      	ldr	r1, [r4, #16]
 8000ec2:	4650      	mov	r0, sl
 8000ec4:	f7ff feb8 	bl	8000c38 <_free_r>
 8000ec8:	230c      	movs	r3, #12
 8000eca:	f8ca 3000 	str.w	r3, [sl]
 8000ece:	89a3      	ldrh	r3, [r4, #12]
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed4:	81a3      	strh	r3, [r4, #12]
 8000ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eda:	e7e9      	b.n	8000eb0 <__ssputs_r+0x88>

08000edc <_svfiprintf_r>:
 8000edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ee0:	4698      	mov	r8, r3
 8000ee2:	898b      	ldrh	r3, [r1, #12]
 8000ee4:	061b      	lsls	r3, r3, #24
 8000ee6:	b09d      	sub	sp, #116	; 0x74
 8000ee8:	4607      	mov	r7, r0
 8000eea:	460d      	mov	r5, r1
 8000eec:	4614      	mov	r4, r2
 8000eee:	d50e      	bpl.n	8000f0e <_svfiprintf_r+0x32>
 8000ef0:	690b      	ldr	r3, [r1, #16]
 8000ef2:	b963      	cbnz	r3, 8000f0e <_svfiprintf_r+0x32>
 8000ef4:	2140      	movs	r1, #64	; 0x40
 8000ef6:	f7ff ff0b 	bl	8000d10 <_malloc_r>
 8000efa:	6028      	str	r0, [r5, #0]
 8000efc:	6128      	str	r0, [r5, #16]
 8000efe:	b920      	cbnz	r0, 8000f0a <_svfiprintf_r+0x2e>
 8000f00:	230c      	movs	r3, #12
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	e0d0      	b.n	80010ac <_svfiprintf_r+0x1d0>
 8000f0a:	2340      	movs	r3, #64	; 0x40
 8000f0c:	616b      	str	r3, [r5, #20]
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9309      	str	r3, [sp, #36]	; 0x24
 8000f12:	2320      	movs	r3, #32
 8000f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f1c:	2330      	movs	r3, #48	; 0x30
 8000f1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80010c4 <_svfiprintf_r+0x1e8>
 8000f22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000f26:	f04f 0901 	mov.w	r9, #1
 8000f2a:	4623      	mov	r3, r4
 8000f2c:	469a      	mov	sl, r3
 8000f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f32:	b10a      	cbz	r2, 8000f38 <_svfiprintf_r+0x5c>
 8000f34:	2a25      	cmp	r2, #37	; 0x25
 8000f36:	d1f9      	bne.n	8000f2c <_svfiprintf_r+0x50>
 8000f38:	ebba 0b04 	subs.w	fp, sl, r4
 8000f3c:	d00b      	beq.n	8000f56 <_svfiprintf_r+0x7a>
 8000f3e:	465b      	mov	r3, fp
 8000f40:	4622      	mov	r2, r4
 8000f42:	4629      	mov	r1, r5
 8000f44:	4638      	mov	r0, r7
 8000f46:	f7ff ff6f 	bl	8000e28 <__ssputs_r>
 8000f4a:	3001      	adds	r0, #1
 8000f4c:	f000 80a9 	beq.w	80010a2 <_svfiprintf_r+0x1c6>
 8000f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f52:	445a      	add	r2, fp
 8000f54:	9209      	str	r2, [sp, #36]	; 0x24
 8000f56:	f89a 3000 	ldrb.w	r3, [sl]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 80a1 	beq.w	80010a2 <_svfiprintf_r+0x1c6>
 8000f60:	2300      	movs	r3, #0
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295
 8000f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f6a:	f10a 0a01 	add.w	sl, sl, #1
 8000f6e:	9304      	str	r3, [sp, #16]
 8000f70:	9307      	str	r3, [sp, #28]
 8000f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000f76:	931a      	str	r3, [sp, #104]	; 0x68
 8000f78:	4654      	mov	r4, sl
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f80:	4850      	ldr	r0, [pc, #320]	; (80010c4 <_svfiprintf_r+0x1e8>)
 8000f82:	f7ff f94d 	bl	8000220 <memchr>
 8000f86:	9a04      	ldr	r2, [sp, #16]
 8000f88:	b9d8      	cbnz	r0, 8000fc2 <_svfiprintf_r+0xe6>
 8000f8a:	06d0      	lsls	r0, r2, #27
 8000f8c:	bf44      	itt	mi
 8000f8e:	2320      	movmi	r3, #32
 8000f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f94:	0711      	lsls	r1, r2, #28
 8000f96:	bf44      	itt	mi
 8000f98:	232b      	movmi	r3, #43	; 0x2b
 8000f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8000fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8000fa4:	d015      	beq.n	8000fd2 <_svfiprintf_r+0xf6>
 8000fa6:	9a07      	ldr	r2, [sp, #28]
 8000fa8:	4654      	mov	r4, sl
 8000faa:	2000      	movs	r0, #0
 8000fac:	f04f 0c0a 	mov.w	ip, #10
 8000fb0:	4621      	mov	r1, r4
 8000fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000fb6:	3b30      	subs	r3, #48	; 0x30
 8000fb8:	2b09      	cmp	r3, #9
 8000fba:	d94d      	bls.n	8001058 <_svfiprintf_r+0x17c>
 8000fbc:	b1b0      	cbz	r0, 8000fec <_svfiprintf_r+0x110>
 8000fbe:	9207      	str	r2, [sp, #28]
 8000fc0:	e014      	b.n	8000fec <_svfiprintf_r+0x110>
 8000fc2:	eba0 0308 	sub.w	r3, r0, r8
 8000fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	9304      	str	r3, [sp, #16]
 8000fce:	46a2      	mov	sl, r4
 8000fd0:	e7d2      	b.n	8000f78 <_svfiprintf_r+0x9c>
 8000fd2:	9b03      	ldr	r3, [sp, #12]
 8000fd4:	1d19      	adds	r1, r3, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	9103      	str	r1, [sp, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	bfbb      	ittet	lt
 8000fde:	425b      	neglt	r3, r3
 8000fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8000fe4:	9307      	strge	r3, [sp, #28]
 8000fe6:	9307      	strlt	r3, [sp, #28]
 8000fe8:	bfb8      	it	lt
 8000fea:	9204      	strlt	r2, [sp, #16]
 8000fec:	7823      	ldrb	r3, [r4, #0]
 8000fee:	2b2e      	cmp	r3, #46	; 0x2e
 8000ff0:	d10c      	bne.n	800100c <_svfiprintf_r+0x130>
 8000ff2:	7863      	ldrb	r3, [r4, #1]
 8000ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8000ff6:	d134      	bne.n	8001062 <_svfiprintf_r+0x186>
 8000ff8:	9b03      	ldr	r3, [sp, #12]
 8000ffa:	1d1a      	adds	r2, r3, #4
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	9203      	str	r2, [sp, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	bfb8      	it	lt
 8001004:	f04f 33ff 	movlt.w	r3, #4294967295
 8001008:	3402      	adds	r4, #2
 800100a:	9305      	str	r3, [sp, #20]
 800100c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80010d4 <_svfiprintf_r+0x1f8>
 8001010:	7821      	ldrb	r1, [r4, #0]
 8001012:	2203      	movs	r2, #3
 8001014:	4650      	mov	r0, sl
 8001016:	f7ff f903 	bl	8000220 <memchr>
 800101a:	b138      	cbz	r0, 800102c <_svfiprintf_r+0x150>
 800101c:	9b04      	ldr	r3, [sp, #16]
 800101e:	eba0 000a 	sub.w	r0, r0, sl
 8001022:	2240      	movs	r2, #64	; 0x40
 8001024:	4082      	lsls	r2, r0
 8001026:	4313      	orrs	r3, r2
 8001028:	3401      	adds	r4, #1
 800102a:	9304      	str	r3, [sp, #16]
 800102c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001030:	4825      	ldr	r0, [pc, #148]	; (80010c8 <_svfiprintf_r+0x1ec>)
 8001032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001036:	2206      	movs	r2, #6
 8001038:	f7ff f8f2 	bl	8000220 <memchr>
 800103c:	2800      	cmp	r0, #0
 800103e:	d038      	beq.n	80010b2 <_svfiprintf_r+0x1d6>
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <_svfiprintf_r+0x1f0>)
 8001042:	bb1b      	cbnz	r3, 800108c <_svfiprintf_r+0x1b0>
 8001044:	9b03      	ldr	r3, [sp, #12]
 8001046:	3307      	adds	r3, #7
 8001048:	f023 0307 	bic.w	r3, r3, #7
 800104c:	3308      	adds	r3, #8
 800104e:	9303      	str	r3, [sp, #12]
 8001050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001052:	4433      	add	r3, r6
 8001054:	9309      	str	r3, [sp, #36]	; 0x24
 8001056:	e768      	b.n	8000f2a <_svfiprintf_r+0x4e>
 8001058:	fb0c 3202 	mla	r2, ip, r2, r3
 800105c:	460c      	mov	r4, r1
 800105e:	2001      	movs	r0, #1
 8001060:	e7a6      	b.n	8000fb0 <_svfiprintf_r+0xd4>
 8001062:	2300      	movs	r3, #0
 8001064:	3401      	adds	r4, #1
 8001066:	9305      	str	r3, [sp, #20]
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 0c0a 	mov.w	ip, #10
 800106e:	4620      	mov	r0, r4
 8001070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001074:	3a30      	subs	r2, #48	; 0x30
 8001076:	2a09      	cmp	r2, #9
 8001078:	d903      	bls.n	8001082 <_svfiprintf_r+0x1a6>
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0c6      	beq.n	800100c <_svfiprintf_r+0x130>
 800107e:	9105      	str	r1, [sp, #20]
 8001080:	e7c4      	b.n	800100c <_svfiprintf_r+0x130>
 8001082:	fb0c 2101 	mla	r1, ip, r1, r2
 8001086:	4604      	mov	r4, r0
 8001088:	2301      	movs	r3, #1
 800108a:	e7f0      	b.n	800106e <_svfiprintf_r+0x192>
 800108c:	ab03      	add	r3, sp, #12
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	462a      	mov	r2, r5
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <_svfiprintf_r+0x1f4>)
 8001094:	a904      	add	r1, sp, #16
 8001096:	4638      	mov	r0, r7
 8001098:	f3af 8000 	nop.w
 800109c:	1c42      	adds	r2, r0, #1
 800109e:	4606      	mov	r6, r0
 80010a0:	d1d6      	bne.n	8001050 <_svfiprintf_r+0x174>
 80010a2:	89ab      	ldrh	r3, [r5, #12]
 80010a4:	065b      	lsls	r3, r3, #25
 80010a6:	f53f af2d 	bmi.w	8000f04 <_svfiprintf_r+0x28>
 80010aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80010ac:	b01d      	add	sp, #116	; 0x74
 80010ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010b2:	ab03      	add	r3, sp, #12
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	462a      	mov	r2, r5
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <_svfiprintf_r+0x1f4>)
 80010ba:	a904      	add	r1, sp, #16
 80010bc:	4638      	mov	r0, r7
 80010be:	f000 f879 	bl	80011b4 <_printf_i>
 80010c2:	e7eb      	b.n	800109c <_svfiprintf_r+0x1c0>
 80010c4:	08001514 	.word	0x08001514
 80010c8:	0800151e 	.word	0x0800151e
 80010cc:	00000000 	.word	0x00000000
 80010d0:	08000e29 	.word	0x08000e29
 80010d4:	0800151a 	.word	0x0800151a

080010d8 <_printf_common>:
 80010d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010dc:	4616      	mov	r6, r2
 80010de:	4699      	mov	r9, r3
 80010e0:	688a      	ldr	r2, [r1, #8]
 80010e2:	690b      	ldr	r3, [r1, #16]
 80010e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80010e8:	4293      	cmp	r3, r2
 80010ea:	bfb8      	it	lt
 80010ec:	4613      	movlt	r3, r2
 80010ee:	6033      	str	r3, [r6, #0]
 80010f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80010f4:	4607      	mov	r7, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	b10a      	cbz	r2, 80010fe <_printf_common+0x26>
 80010fa:	3301      	adds	r3, #1
 80010fc:	6033      	str	r3, [r6, #0]
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	0699      	lsls	r1, r3, #26
 8001102:	bf42      	ittt	mi
 8001104:	6833      	ldrmi	r3, [r6, #0]
 8001106:	3302      	addmi	r3, #2
 8001108:	6033      	strmi	r3, [r6, #0]
 800110a:	6825      	ldr	r5, [r4, #0]
 800110c:	f015 0506 	ands.w	r5, r5, #6
 8001110:	d106      	bne.n	8001120 <_printf_common+0x48>
 8001112:	f104 0a19 	add.w	sl, r4, #25
 8001116:	68e3      	ldr	r3, [r4, #12]
 8001118:	6832      	ldr	r2, [r6, #0]
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	42ab      	cmp	r3, r5
 800111e:	dc26      	bgt.n	800116e <_printf_common+0x96>
 8001120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001124:	1e13      	subs	r3, r2, #0
 8001126:	6822      	ldr	r2, [r4, #0]
 8001128:	bf18      	it	ne
 800112a:	2301      	movne	r3, #1
 800112c:	0692      	lsls	r2, r2, #26
 800112e:	d42b      	bmi.n	8001188 <_printf_common+0xb0>
 8001130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001134:	4649      	mov	r1, r9
 8001136:	4638      	mov	r0, r7
 8001138:	47c0      	blx	r8
 800113a:	3001      	adds	r0, #1
 800113c:	d01e      	beq.n	800117c <_printf_common+0xa4>
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	6922      	ldr	r2, [r4, #16]
 8001142:	f003 0306 	and.w	r3, r3, #6
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf02      	ittt	eq
 800114a:	68e5      	ldreq	r5, [r4, #12]
 800114c:	6833      	ldreq	r3, [r6, #0]
 800114e:	1aed      	subeq	r5, r5, r3
 8001150:	68a3      	ldr	r3, [r4, #8]
 8001152:	bf0c      	ite	eq
 8001154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001158:	2500      	movne	r5, #0
 800115a:	4293      	cmp	r3, r2
 800115c:	bfc4      	itt	gt
 800115e:	1a9b      	subgt	r3, r3, r2
 8001160:	18ed      	addgt	r5, r5, r3
 8001162:	2600      	movs	r6, #0
 8001164:	341a      	adds	r4, #26
 8001166:	42b5      	cmp	r5, r6
 8001168:	d11a      	bne.n	80011a0 <_printf_common+0xc8>
 800116a:	2000      	movs	r0, #0
 800116c:	e008      	b.n	8001180 <_printf_common+0xa8>
 800116e:	2301      	movs	r3, #1
 8001170:	4652      	mov	r2, sl
 8001172:	4649      	mov	r1, r9
 8001174:	4638      	mov	r0, r7
 8001176:	47c0      	blx	r8
 8001178:	3001      	adds	r0, #1
 800117a:	d103      	bne.n	8001184 <_printf_common+0xac>
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001184:	3501      	adds	r5, #1
 8001186:	e7c6      	b.n	8001116 <_printf_common+0x3e>
 8001188:	18e1      	adds	r1, r4, r3
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	2030      	movs	r0, #48	; 0x30
 800118e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001192:	4422      	add	r2, r4
 8001194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800119c:	3302      	adds	r3, #2
 800119e:	e7c7      	b.n	8001130 <_printf_common+0x58>
 80011a0:	2301      	movs	r3, #1
 80011a2:	4622      	mov	r2, r4
 80011a4:	4649      	mov	r1, r9
 80011a6:	4638      	mov	r0, r7
 80011a8:	47c0      	blx	r8
 80011aa:	3001      	adds	r0, #1
 80011ac:	d0e6      	beq.n	800117c <_printf_common+0xa4>
 80011ae:	3601      	adds	r6, #1
 80011b0:	e7d9      	b.n	8001166 <_printf_common+0x8e>
	...

080011b4 <_printf_i>:
 80011b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80011b8:	7e0f      	ldrb	r7, [r1, #24]
 80011ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80011bc:	2f78      	cmp	r7, #120	; 0x78
 80011be:	4691      	mov	r9, r2
 80011c0:	4680      	mov	r8, r0
 80011c2:	460c      	mov	r4, r1
 80011c4:	469a      	mov	sl, r3
 80011c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80011ca:	d807      	bhi.n	80011dc <_printf_i+0x28>
 80011cc:	2f62      	cmp	r7, #98	; 0x62
 80011ce:	d80a      	bhi.n	80011e6 <_printf_i+0x32>
 80011d0:	2f00      	cmp	r7, #0
 80011d2:	f000 80d4 	beq.w	800137e <_printf_i+0x1ca>
 80011d6:	2f58      	cmp	r7, #88	; 0x58
 80011d8:	f000 80c0 	beq.w	800135c <_printf_i+0x1a8>
 80011dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80011e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80011e4:	e03a      	b.n	800125c <_printf_i+0xa8>
 80011e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80011ea:	2b15      	cmp	r3, #21
 80011ec:	d8f6      	bhi.n	80011dc <_printf_i+0x28>
 80011ee:	a101      	add	r1, pc, #4	; (adr r1, 80011f4 <_printf_i+0x40>)
 80011f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80011f4:	0800124d 	.word	0x0800124d
 80011f8:	08001261 	.word	0x08001261
 80011fc:	080011dd 	.word	0x080011dd
 8001200:	080011dd 	.word	0x080011dd
 8001204:	080011dd 	.word	0x080011dd
 8001208:	080011dd 	.word	0x080011dd
 800120c:	08001261 	.word	0x08001261
 8001210:	080011dd 	.word	0x080011dd
 8001214:	080011dd 	.word	0x080011dd
 8001218:	080011dd 	.word	0x080011dd
 800121c:	080011dd 	.word	0x080011dd
 8001220:	08001365 	.word	0x08001365
 8001224:	0800128d 	.word	0x0800128d
 8001228:	0800131f 	.word	0x0800131f
 800122c:	080011dd 	.word	0x080011dd
 8001230:	080011dd 	.word	0x080011dd
 8001234:	08001387 	.word	0x08001387
 8001238:	080011dd 	.word	0x080011dd
 800123c:	0800128d 	.word	0x0800128d
 8001240:	080011dd 	.word	0x080011dd
 8001244:	080011dd 	.word	0x080011dd
 8001248:	08001327 	.word	0x08001327
 800124c:	682b      	ldr	r3, [r5, #0]
 800124e:	1d1a      	adds	r2, r3, #4
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	602a      	str	r2, [r5, #0]
 8001254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800125c:	2301      	movs	r3, #1
 800125e:	e09f      	b.n	80013a0 <_printf_i+0x1ec>
 8001260:	6820      	ldr	r0, [r4, #0]
 8001262:	682b      	ldr	r3, [r5, #0]
 8001264:	0607      	lsls	r7, r0, #24
 8001266:	f103 0104 	add.w	r1, r3, #4
 800126a:	6029      	str	r1, [r5, #0]
 800126c:	d501      	bpl.n	8001272 <_printf_i+0xbe>
 800126e:	681e      	ldr	r6, [r3, #0]
 8001270:	e003      	b.n	800127a <_printf_i+0xc6>
 8001272:	0646      	lsls	r6, r0, #25
 8001274:	d5fb      	bpl.n	800126e <_printf_i+0xba>
 8001276:	f9b3 6000 	ldrsh.w	r6, [r3]
 800127a:	2e00      	cmp	r6, #0
 800127c:	da03      	bge.n	8001286 <_printf_i+0xd2>
 800127e:	232d      	movs	r3, #45	; 0x2d
 8001280:	4276      	negs	r6, r6
 8001282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001286:	485a      	ldr	r0, [pc, #360]	; (80013f0 <_printf_i+0x23c>)
 8001288:	230a      	movs	r3, #10
 800128a:	e012      	b.n	80012b2 <_printf_i+0xfe>
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	6820      	ldr	r0, [r4, #0]
 8001290:	1d19      	adds	r1, r3, #4
 8001292:	6029      	str	r1, [r5, #0]
 8001294:	0605      	lsls	r5, r0, #24
 8001296:	d501      	bpl.n	800129c <_printf_i+0xe8>
 8001298:	681e      	ldr	r6, [r3, #0]
 800129a:	e002      	b.n	80012a2 <_printf_i+0xee>
 800129c:	0641      	lsls	r1, r0, #25
 800129e:	d5fb      	bpl.n	8001298 <_printf_i+0xe4>
 80012a0:	881e      	ldrh	r6, [r3, #0]
 80012a2:	4853      	ldr	r0, [pc, #332]	; (80013f0 <_printf_i+0x23c>)
 80012a4:	2f6f      	cmp	r7, #111	; 0x6f
 80012a6:	bf0c      	ite	eq
 80012a8:	2308      	moveq	r3, #8
 80012aa:	230a      	movne	r3, #10
 80012ac:	2100      	movs	r1, #0
 80012ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80012b2:	6865      	ldr	r5, [r4, #4]
 80012b4:	60a5      	str	r5, [r4, #8]
 80012b6:	2d00      	cmp	r5, #0
 80012b8:	bfa2      	ittt	ge
 80012ba:	6821      	ldrge	r1, [r4, #0]
 80012bc:	f021 0104 	bicge.w	r1, r1, #4
 80012c0:	6021      	strge	r1, [r4, #0]
 80012c2:	b90e      	cbnz	r6, 80012c8 <_printf_i+0x114>
 80012c4:	2d00      	cmp	r5, #0
 80012c6:	d04b      	beq.n	8001360 <_printf_i+0x1ac>
 80012c8:	4615      	mov	r5, r2
 80012ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80012ce:	fb03 6711 	mls	r7, r3, r1, r6
 80012d2:	5dc7      	ldrb	r7, [r0, r7]
 80012d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80012d8:	4637      	mov	r7, r6
 80012da:	42bb      	cmp	r3, r7
 80012dc:	460e      	mov	r6, r1
 80012de:	d9f4      	bls.n	80012ca <_printf_i+0x116>
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d10b      	bne.n	80012fc <_printf_i+0x148>
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	d508      	bpl.n	80012fc <_printf_i+0x148>
 80012ea:	6923      	ldr	r3, [r4, #16]
 80012ec:	6861      	ldr	r1, [r4, #4]
 80012ee:	4299      	cmp	r1, r3
 80012f0:	bfde      	ittt	le
 80012f2:	2330      	movle	r3, #48	; 0x30
 80012f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80012f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80012fc:	1b52      	subs	r2, r2, r5
 80012fe:	6122      	str	r2, [r4, #16]
 8001300:	f8cd a000 	str.w	sl, [sp]
 8001304:	464b      	mov	r3, r9
 8001306:	aa03      	add	r2, sp, #12
 8001308:	4621      	mov	r1, r4
 800130a:	4640      	mov	r0, r8
 800130c:	f7ff fee4 	bl	80010d8 <_printf_common>
 8001310:	3001      	adds	r0, #1
 8001312:	d14a      	bne.n	80013aa <_printf_i+0x1f6>
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	b004      	add	sp, #16
 800131a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	6023      	str	r3, [r4, #0]
 8001326:	4833      	ldr	r0, [pc, #204]	; (80013f4 <_printf_i+0x240>)
 8001328:	2778      	movs	r7, #120	; 0x78
 800132a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	6829      	ldr	r1, [r5, #0]
 8001332:	061f      	lsls	r7, r3, #24
 8001334:	f851 6b04 	ldr.w	r6, [r1], #4
 8001338:	d402      	bmi.n	8001340 <_printf_i+0x18c>
 800133a:	065f      	lsls	r7, r3, #25
 800133c:	bf48      	it	mi
 800133e:	b2b6      	uxthmi	r6, r6
 8001340:	07df      	lsls	r7, r3, #31
 8001342:	bf48      	it	mi
 8001344:	f043 0320 	orrmi.w	r3, r3, #32
 8001348:	6029      	str	r1, [r5, #0]
 800134a:	bf48      	it	mi
 800134c:	6023      	strmi	r3, [r4, #0]
 800134e:	b91e      	cbnz	r6, 8001358 <_printf_i+0x1a4>
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	f023 0320 	bic.w	r3, r3, #32
 8001356:	6023      	str	r3, [r4, #0]
 8001358:	2310      	movs	r3, #16
 800135a:	e7a7      	b.n	80012ac <_printf_i+0xf8>
 800135c:	4824      	ldr	r0, [pc, #144]	; (80013f0 <_printf_i+0x23c>)
 800135e:	e7e4      	b.n	800132a <_printf_i+0x176>
 8001360:	4615      	mov	r5, r2
 8001362:	e7bd      	b.n	80012e0 <_printf_i+0x12c>
 8001364:	682b      	ldr	r3, [r5, #0]
 8001366:	6826      	ldr	r6, [r4, #0]
 8001368:	6961      	ldr	r1, [r4, #20]
 800136a:	1d18      	adds	r0, r3, #4
 800136c:	6028      	str	r0, [r5, #0]
 800136e:	0635      	lsls	r5, r6, #24
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	d501      	bpl.n	8001378 <_printf_i+0x1c4>
 8001374:	6019      	str	r1, [r3, #0]
 8001376:	e002      	b.n	800137e <_printf_i+0x1ca>
 8001378:	0670      	lsls	r0, r6, #25
 800137a:	d5fb      	bpl.n	8001374 <_printf_i+0x1c0>
 800137c:	8019      	strh	r1, [r3, #0]
 800137e:	2300      	movs	r3, #0
 8001380:	6123      	str	r3, [r4, #16]
 8001382:	4615      	mov	r5, r2
 8001384:	e7bc      	b.n	8001300 <_printf_i+0x14c>
 8001386:	682b      	ldr	r3, [r5, #0]
 8001388:	1d1a      	adds	r2, r3, #4
 800138a:	602a      	str	r2, [r5, #0]
 800138c:	681d      	ldr	r5, [r3, #0]
 800138e:	6862      	ldr	r2, [r4, #4]
 8001390:	2100      	movs	r1, #0
 8001392:	4628      	mov	r0, r5
 8001394:	f7fe ff44 	bl	8000220 <memchr>
 8001398:	b108      	cbz	r0, 800139e <_printf_i+0x1ea>
 800139a:	1b40      	subs	r0, r0, r5
 800139c:	6060      	str	r0, [r4, #4]
 800139e:	6863      	ldr	r3, [r4, #4]
 80013a0:	6123      	str	r3, [r4, #16]
 80013a2:	2300      	movs	r3, #0
 80013a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013a8:	e7aa      	b.n	8001300 <_printf_i+0x14c>
 80013aa:	6923      	ldr	r3, [r4, #16]
 80013ac:	462a      	mov	r2, r5
 80013ae:	4649      	mov	r1, r9
 80013b0:	4640      	mov	r0, r8
 80013b2:	47d0      	blx	sl
 80013b4:	3001      	adds	r0, #1
 80013b6:	d0ad      	beq.n	8001314 <_printf_i+0x160>
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	079b      	lsls	r3, r3, #30
 80013bc:	d413      	bmi.n	80013e6 <_printf_i+0x232>
 80013be:	68e0      	ldr	r0, [r4, #12]
 80013c0:	9b03      	ldr	r3, [sp, #12]
 80013c2:	4298      	cmp	r0, r3
 80013c4:	bfb8      	it	lt
 80013c6:	4618      	movlt	r0, r3
 80013c8:	e7a6      	b.n	8001318 <_printf_i+0x164>
 80013ca:	2301      	movs	r3, #1
 80013cc:	4632      	mov	r2, r6
 80013ce:	4649      	mov	r1, r9
 80013d0:	4640      	mov	r0, r8
 80013d2:	47d0      	blx	sl
 80013d4:	3001      	adds	r0, #1
 80013d6:	d09d      	beq.n	8001314 <_printf_i+0x160>
 80013d8:	3501      	adds	r5, #1
 80013da:	68e3      	ldr	r3, [r4, #12]
 80013dc:	9903      	ldr	r1, [sp, #12]
 80013de:	1a5b      	subs	r3, r3, r1
 80013e0:	42ab      	cmp	r3, r5
 80013e2:	dcf2      	bgt.n	80013ca <_printf_i+0x216>
 80013e4:	e7eb      	b.n	80013be <_printf_i+0x20a>
 80013e6:	2500      	movs	r5, #0
 80013e8:	f104 0619 	add.w	r6, r4, #25
 80013ec:	e7f5      	b.n	80013da <_printf_i+0x226>
 80013ee:	bf00      	nop
 80013f0:	08001525 	.word	0x08001525
 80013f4:	08001536 	.word	0x08001536

080013f8 <memmove>:
 80013f8:	4288      	cmp	r0, r1
 80013fa:	b510      	push	{r4, lr}
 80013fc:	eb01 0402 	add.w	r4, r1, r2
 8001400:	d902      	bls.n	8001408 <memmove+0x10>
 8001402:	4284      	cmp	r4, r0
 8001404:	4623      	mov	r3, r4
 8001406:	d807      	bhi.n	8001418 <memmove+0x20>
 8001408:	1e43      	subs	r3, r0, #1
 800140a:	42a1      	cmp	r1, r4
 800140c:	d008      	beq.n	8001420 <memmove+0x28>
 800140e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001412:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001416:	e7f8      	b.n	800140a <memmove+0x12>
 8001418:	4402      	add	r2, r0
 800141a:	4601      	mov	r1, r0
 800141c:	428a      	cmp	r2, r1
 800141e:	d100      	bne.n	8001422 <memmove+0x2a>
 8001420:	bd10      	pop	{r4, pc}
 8001422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001426:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800142a:	e7f7      	b.n	800141c <memmove+0x24>

0800142c <_sbrk_r>:
 800142c:	b538      	push	{r3, r4, r5, lr}
 800142e:	4d06      	ldr	r5, [pc, #24]	; (8001448 <_sbrk_r+0x1c>)
 8001430:	2300      	movs	r3, #0
 8001432:	4604      	mov	r4, r0
 8001434:	4608      	mov	r0, r1
 8001436:	602b      	str	r3, [r5, #0]
 8001438:	f7ff fb1e 	bl	8000a78 <_sbrk>
 800143c:	1c43      	adds	r3, r0, #1
 800143e:	d102      	bne.n	8001446 <_sbrk_r+0x1a>
 8001440:	682b      	ldr	r3, [r5, #0]
 8001442:	b103      	cbz	r3, 8001446 <_sbrk_r+0x1a>
 8001444:	6023      	str	r3, [r4, #0]
 8001446:	bd38      	pop	{r3, r4, r5, pc}
 8001448:	20000318 	.word	0x20000318

0800144c <memcpy>:
 800144c:	440a      	add	r2, r1
 800144e:	4291      	cmp	r1, r2
 8001450:	f100 33ff 	add.w	r3, r0, #4294967295
 8001454:	d100      	bne.n	8001458 <memcpy+0xc>
 8001456:	4770      	bx	lr
 8001458:	b510      	push	{r4, lr}
 800145a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800145e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001462:	4291      	cmp	r1, r2
 8001464:	d1f9      	bne.n	800145a <memcpy+0xe>
 8001466:	bd10      	pop	{r4, pc}

08001468 <_realloc_r>:
 8001468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800146c:	4680      	mov	r8, r0
 800146e:	4614      	mov	r4, r2
 8001470:	460e      	mov	r6, r1
 8001472:	b921      	cbnz	r1, 800147e <_realloc_r+0x16>
 8001474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001478:	4611      	mov	r1, r2
 800147a:	f7ff bc49 	b.w	8000d10 <_malloc_r>
 800147e:	b92a      	cbnz	r2, 800148c <_realloc_r+0x24>
 8001480:	f7ff fbda 	bl	8000c38 <_free_r>
 8001484:	4625      	mov	r5, r4
 8001486:	4628      	mov	r0, r5
 8001488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800148c:	f000 f81b 	bl	80014c6 <_malloc_usable_size_r>
 8001490:	4284      	cmp	r4, r0
 8001492:	4607      	mov	r7, r0
 8001494:	d802      	bhi.n	800149c <_realloc_r+0x34>
 8001496:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800149a:	d812      	bhi.n	80014c2 <_realloc_r+0x5a>
 800149c:	4621      	mov	r1, r4
 800149e:	4640      	mov	r0, r8
 80014a0:	f7ff fc36 	bl	8000d10 <_malloc_r>
 80014a4:	4605      	mov	r5, r0
 80014a6:	2800      	cmp	r0, #0
 80014a8:	d0ed      	beq.n	8001486 <_realloc_r+0x1e>
 80014aa:	42bc      	cmp	r4, r7
 80014ac:	4622      	mov	r2, r4
 80014ae:	4631      	mov	r1, r6
 80014b0:	bf28      	it	cs
 80014b2:	463a      	movcs	r2, r7
 80014b4:	f7ff ffca 	bl	800144c <memcpy>
 80014b8:	4631      	mov	r1, r6
 80014ba:	4640      	mov	r0, r8
 80014bc:	f7ff fbbc 	bl	8000c38 <_free_r>
 80014c0:	e7e1      	b.n	8001486 <_realloc_r+0x1e>
 80014c2:	4635      	mov	r5, r6
 80014c4:	e7df      	b.n	8001486 <_realloc_r+0x1e>

080014c6 <_malloc_usable_size_r>:
 80014c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014ca:	1f18      	subs	r0, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bfbc      	itt	lt
 80014d0:	580b      	ldrlt	r3, [r1, r0]
 80014d2:	18c0      	addlt	r0, r0, r3
 80014d4:	4770      	bx	lr
	...

080014d8 <_init>:
 80014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014da:	bf00      	nop
 80014dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014de:	bc08      	pop	{r3}
 80014e0:	469e      	mov	lr, r3
 80014e2:	4770      	bx	lr

080014e4 <_fini>:
 80014e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e6:	bf00      	nop
 80014e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ea:	bc08      	pop	{r3}
 80014ec:	469e      	mov	lr, r3
 80014ee:	4770      	bx	lr
